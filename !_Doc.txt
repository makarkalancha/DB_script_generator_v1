==================Requirements:================
2 files are necessary: one containing the order of scripts to run and second the order of scripts to run for rollback.

To wrap the script app needs the name of the script, the destination folder and path to order file and rollback order file.

By default app offers all 4 options:
1-name of the script is current date + "_db_script"
2-destination folder is current folder from where the app was executed
3-order file and rollback order file are in the current folder (previous point) and the name is "order_file.txt" and "rollback_order_file.txt"

Format of order files is (no header/footer):

01_insert _duplicates.sql
02_create_TMP_YJADGTARGCH_YJADGBIDM.sql
03_ create_TMP_YJADGROUPBIDMULTIPLIER.sql

"rollback_order_file.txt" is mandatory, but it can be empty. Client issue's fixes often don't need rollback.
If "rollback_order_file.txt" is emtpy, then ROLLBACK folder is not created.
If "rollback_order_file.txt" is NOT empty, then ROLLBACK folder IS created in accordance with script order in the file.
Format of the file is like file "order_file.txt".


==================Validation:==================
--ScriptNameSpaceRule
checks if there's a space in a scrip name; otherwise script will fail

--SqlExtentionRule
checks if script name ends with ".sql"

--Synonyms
There should be no synonyms in dev schemas, i.e.: synonyms should be in DEVACQUISIO*NONSTAT_run_all.sql files,
but they should not be in DEVTEAMSCHEMA_run_all.sql;

If file's name is 03_create_synonym_campaign.sql, then is file we be added to DEVACQUISIO*NONSTAT_run_all.sql, but not to DEVTEAMSCHEMA_run_all.sql;


==================Building:====================
BuildDBScript.java #144:
1)PROD
--for prod to create jar uncomment
FileUtils.copyFileFromJar(getClass().getClassLoader().getResourceAsStream("cc_grant_obj_privileges.sql"),
    path + "\\cc_grant_obj_privileges.sql");
FileUtils.copyFileFromJar(getClass().getClassLoader().getResourceAsStream("validate_invalid_objects.sql"),
    path + "\\validate_invalid_objects.sql");
--and comment
FileUtils.copyFileFromJar("cc_grant_obj_privileges.sql",
    path + "\\cc_grant_obj_privileges.sql");
FileUtils.copyFileFromJar("validate_invalid_objects.sql",
    path + "\\validate_invalid_objects.sql");
--build->build artifacts, create jar

2)TEST
--debug, run in IDE uncomment
FileUtils.copyFileFromJar("cc_grant_obj_privileges.sql",
    path + "\\cc_grant_obj_privileges.sql");
FileUtils.copyFileFromJar("validate_invalid_objects.sql",
    path + "\\validate_invalid_objects.sql");
--and comment
FileUtils.copyFileFromJar(getClass().getClassLoader().getResourceAsStream("cc_grant_obj_privileges.sql"),
    path + "\\cc_grant_obj_privileges.sql");
FileUtils.copyFileFromJar(getClass().getClassLoader().getResourceAsStream("validate_invalid_objects.sql"),
    path + "\\validate_invalid_objects.sql");